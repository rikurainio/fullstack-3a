{"version":3,"sources":["services/persons.js","App.js","index.js"],"names":["usersURL","axios","get","then","response","data","user","post","userId","console","log","put","delete","Notification","message","messageType","className","Filter","props","newFilter","handleFilterChange","value","onChange","PersonForm","newName","handleNameChange","newNumber","handleNumberChange","addPerson","onClick","type","Numbers","filteredPersons","persons","filter","person","name","toLowerCase","includes","map","number","onDeleteButton","App","useState","setPersons","setNewName","setNewNumber","setNewFilter","setMessage","setMessageType","useEffect","personService","event","target","preventDefault","personObject","copy","elem","foundPerson","find","foundNumber","window","confirm","id","indexOf","setTimeout","catch","error","alert","addedPerson","concat","personName","personFound","newArray","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ea5ed170.chunk.js","sourcesContent":["import axios from \"axios\"\r\n//const usersURL = \"https://nodeluettelo.herokuapp.com/api/persons\"\r\nconst usersURL = \"/api/persons\"\r\n\r\n//AXIOS HANDLES HTTP COMMUNICATION\r\n\r\n//Get all users from api route\r\nconst getUsers = () => {\r\n    const request = axios.get(usersURL)\r\n    return request.then(response => response.data)\r\n}\r\n\r\n//Uses POST HTTP method to add user to given route\r\n//@Param user is JSON object\r\nconst addUser = (user) => {\r\n    const request = axios.post(usersURL, user)\r\n    return request.then(response => response.data)\r\n}\r\n\r\n//Uses PUT HTTP method to update existing user (id) with new information\r\n//@Param user is JSON object that includes new userValue\r\n//@Param userId is the given user that gets replaced\r\nconst updateUser = (user, userId) => {\r\n    console.log(\"useri: \", user, \"useriID: \", userId)\r\n\r\n    const request = axios.put(`${usersURL}/${userId}`, user)\r\n    return request.then(response => response.data)\r\n}\r\n\r\n//Deletes user with given ID using HTTP DELETE\r\nconst deleteUser = (userId) => {\r\n    const request = axios.delete(`${usersURL}/${userId}`)\r\n    return request.then(response => response.data)\r\n}\r\n\r\n//export module\r\nexport default {\r\n    getUsers: getUsers,\r\n    addUser: addUser,\r\n    updateUser: updateUser,\r\n    deleteUser: deleteUser\r\n}","import React, { useEffect, useState } from 'react'\nimport personService from \"./services/persons\"\n\nconst App = () => {\n  const [persons, setPersons] = useState([])\n  const [newName, setNewName] = useState('')\n  const [newNumber, setNewNumber] = useState(\"\")\n  const [newFilter, setNewFilter] = useState(\"\")\n  const [message, setMessage] = useState(\"\")\n  const [messageType, setMessageType] = useState(\"neutral\")\n\n  //GET USERS\n  useEffect(() => {\n    personService\n      .getUsers()\n        .then(persons => {\n          setPersons(persons)\n        })\n  },[])\n\n  const addPerson = (event) => {\n    event.preventDefault()\n\n    const personObject = {\n      name: newName,\n      number: newNumber\n    }\n\n    const copy = persons.map(elem => elem)\n    const foundPerson = copy.find(person => person.name === newName)\n    const foundNumber = copy.find(person => person.number === newNumber)\n\n    //Check if person with given name or number already exists\n    if(foundPerson && foundPerson.number !== personObject.number){\n      const answer = window.confirm(`${newName} is already added to phonebook, replace the old number with a new one?`)\n      \n      if(answer){\n        personService\n        .updateUser(personObject, foundPerson.id)\n        .then(response => {\n          console.log(\"response : \", response)\n          const copy = [...persons]\n          const index = persons.indexOf(foundPerson)\n          copy[index].number = newNumber\n\n          setPersons(copy)\n\n          //reset input fields\n          setNewName(\"\")\n          setNewNumber(\"\")\n\n          //notifcation\n          setMessage(`Changed number of ${personObject.name}`)\n          setMessageType(\"success\")\n          setTimeout(() => {\n            setMessageType(\"neutral\")\n          }, 3000)\n          console.log(\"message: \", message)\n        })\n\n        .catch(error => {\n          console.log(\"catched error: \", error)\n          setPersons(persons.filter(person => person.id !== foundPerson.id))\n\n          //change notification\n          setMessage(`Information of ${personObject.name} has already been removed from server`)\n          setMessageType(\"failure\")\n\n          setTimeout(() => {\n            setMessageType(\"neutral\")\n          }, 3000)\n          //reset input fields\n          setNewName(\"\")\n          setNewNumber(\"\")\n        })\n      }\n\n      else{\n        //reset input fields\n        setNewName(\"\")\n        setNewNumber(\"\")\n      }\n      \n    }\n    if(foundNumber){\n      window.alert(`${newNumber} is already added to phonebook`)\n    }\n    if(!(foundPerson)){\n      //UPDATE STATE ONLY IF Promise resolves!\n      personService\n        .addUser(personObject)\n          .then(addedPerson => {\n            //concat creates copy!\n            setPersons(persons.concat(addedPerson))\n            \n            //reset input fields\n            setNewName(\"\")\n            setNewNumber(\"\")\n\n            //notifcation\n            setMessage(`Added ${personObject.name}`)\n            setMessageType(\"success\")\n            setTimeout(() => {\n              setMessageType(\"neutral\")\n            }, 3000)\n            console.log(\"message: \", message)\n          })\n          .catch(error => {\n            //access the server error object like this\n            console.log(\"frontti errori mongooselta: \", error.response.data)\n            \n            //UI notification\n            setMessage(`Errori: ${error.response}`)\n            setMessageType(\"failure\")\n            setTimeout(() => {\n              setMessageType(\"neutral\")\n            }, 3000)\n          })\n    }\n  }\n\n  const deletePerson = (personName) => {\n    if(window.confirm(`Delete ${personName} ?`)){\n      let personFound = persons.find(person => person.name === personName)\n        if(personFound){\n          const newArray = persons.filter(person => {\n            return person !== personFound\n          })\n          console.log(\"new arr: \", newArray)\n          personService\n            .deleteUser(personFound.id)\n            .then(response => {\n              //notifcation\n              setMessage(`Deleted ${personFound.name}`)\n              setMessageType(\"success\")\n              setTimeout(() => {\n                setMessageType(\"neutral\")\n              }, 3000)\n              console.log(\"message: \", message)\n              console.log(response)\n            })\n          setPersons(newArray)\n        }\n    }\n  }\n\n  const handleNameChange = (event) => {\n    setNewName(event.target.value)\n  }\n\n  const handleNumberChange = (event) => {\n    setNewNumber(event.target.value)\n  }\n\n  const handleFilterChange = (event) => {\n    setNewFilter(event.target.value)\n  }\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={message}\n                    messageType={messageType} />\n      <Filter newFilter={newFilter}\n              handleFilterChange={handleFilterChange}/>\n      <h3>add a new</h3>\n      <PersonForm newName={newName}\n                  handleNameChange={handleNameChange}\n                  newNumber={newNumber}\n                  handleNumberChange={handleNumberChange}\n                  addPerson={addPerson}/>\n      <Numbers persons={persons} onDeleteButton={deletePerson} filter={newFilter}/>\n    </div>\n  )\n\n}\n\nconst Notification = ({message, messageType}) => {\n  if(message === null){\n    return null\n  }\n\n  console.log(\"Notification component called with message: \", message)\n  console.log(\"Message type is: \", messageType)\n\n  if(messageType === \"success\"){\n    return (\n      <div className=\"successNotification\">\n        {message}\n      </div>\n    )\n  }\n  if(messageType === \"failure\"){\n    return (\n      <div className=\"failureNotification\">\n        {message}\n      </div>\n    )\n  }\n  if(messageType === \"neutral\"){\n    return (\n      <div></div>\n    )\n  }\n}\n\nconst Filter = (props) => {\n  let {newFilter, handleFilterChange} = props\n  return (\n    <div>\n      filter shown with <input value={newFilter}\n                               onChange={handleFilterChange}/>    \n    </div>\n  )\n}\n\nconst PersonForm = (props) => {\n  let {newName, handleNameChange,\n       newNumber, handleNumberChange, addPerson} = props\n  return (\n    <form>\n        <div>\n          name: <input  value={newName}\n                        onChange={handleNameChange}/>\n        </div>\n        <div>\n          number: <input value={newNumber}\n                         onChange={handleNumberChange}/>\n        </div>\n\n\n        <div>\n          <button onClick={addPerson}\n                  type=\"submit\">add</button>\n        </div>\n      </form>\n  )\n}\n\nconst Numbers = (props) => {\n  const persons = props.persons\n  let filteredPersons = persons.filter(person =>\n    person.name.toLowerCase().includes(props.filter.toLowerCase()))\n\n  return (\n    <div>\n    <h2>Numbers</h2>\n      <div>\n        {filteredPersons.map(person =>\n        <p key={person.name}>\n            <p>{person.name} {person.number}\n              <button onClick={() => props.onDeleteButton(person.name)}>delete</button>\n            </p>\n        </p>\n      )}\n      </div>\n      \n  </div>\n  )\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport \"./index.css\"\n                \nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}